<?php

namespace StudyncoBundle\Repository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository
{

    public function findSortedById()
    {
        return $this->createQueryBuilder('c')
            ->select('c')
            ->orderBy('c.id','DESC')
            ->getQuery()
            ->getResult();
    }

    public function getSortedByTitle()
    {
        $query = $this->createQueryBuilder('c')
            ->select('c')
            ->orderBy('c.title', 'ASC')
            ->getQuery();

        return $query->getResult();
    }

    public function getCategoryById($id)
    {
        $query = $this->createQueryBuilder('c')
            ->select('c')
            ->where('c.id = :id')
            ->setParameter('id', $id)->getQuery();
        return $query->getSingleResult();
    }

    public function getCategoryWithLimit($offset, $limit)
    {
        /*
         * $query->setQueryHint('foo', 'bar');
         * $query->useResultCache('my_cache_id');
         */
        $query = $this->createQueryBuilder('c')
            ->select('c')
            ->orderBy('c.id', 'ASC')
            ->setFirstResult( $offset )
            ->setMaxResults( $limit )
            ->getQuery();

        return $query->getResult();
    }

    public function getCategoryLike(){
        $qb = $this->createQueryBuilder('c');

        $query = $qb->add('select', $qb->expr()->count('c.id'))->getQuery();

        return $query->getSingleScalarResult();
    }

    public function getFieldOfCategory()
    {
        $query = $this->createQueryBuilder('c')
            ->select('c')
            ->leftJoin('c.fields','f','WITH','f.category = c.id')
            ->andWhere('c.id = :id')
            ->setParameter('id',3)
            ->getQuery();

        return $query->getResult();
    }

    public function getCategoryParent()
    {

        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
            ->where('c.parent IS NULL')->getQuery();

        return $qb;
    }
}
